#!/bin/bash

oneTimeSetUp() {
  echo "Test SetUp..."

  mkdir -p /testdir/d1/proj/d1
  mkdir -p /testdir/d1/proj/d2/import
  touch    /testdir/d1/proj/d2/import/f1
  touch    /testdir/d1/proj/d2/import/f2
  mkdir -p /testdir/d1/proj/out
  touch    /testdir/d1/proj/out/f1
  mkdir -p /testdir/d1/proj/.*/in
  mkdir -p /testdir/d2/id/logs
  mkdir -p /testdir/d3/logs
  mkdir -p /testdir/d/scripts
  touch    /testdir/d4
  touch    /testdir/f1
  touch    /testdir/f2

  groupadd g1
  groupadd g2
  useradd -g g1 u1
  useradd -g g2 u2

  cat <<EOF > /tmp/patterns.txt
# pattern                   owner  grp   dmode fmode
/testdir/d.*/proj/d1         u1     g1    770   -
/testdir/d.*/proj/d2/import  u1     g2    770   -
/testdir/d.*/proj/out        u1     g1   2770   -
/testdir/d.*/proj/.*/in      u1     g1    770   -
/testdir/d.*/proj/[^/]+      u1     g1    750   -
/testdir/d[^/]*/proj      u1     g1    750   -
/testdir/d.*/id/logs      u1     g1    770   -
/testdir/d.*/logs         u1     g1    770   -
/testdir/d.*/scripts      u1     g1    750   -
/testdir/d.*              u1     g1    770   660
/testdir/.*                  -      -     -     -
/testdir                     u1     g1    775   -
EOF

}

exitStatus=0

test_20_pending_changes() {
  output=`./jperms.pl -f /tmp/patterns.txt -d /testdir -n | grep "pending=20$"`
  assertEquals "Summary: inspected=22 changed=0 failed=0 pending=20" "$output"
  [[ $? == 1 ]] && exitStatus=1
}

test_20_pending_changes_again() {
  output=`./jperms.pl -f /tmp/patterns.txt -d /testdir -n | grep "pending=20$"`
  assertEquals "Summary: inspected=22 changed=0 failed=0 pending=20" "$output"
  [[ $? == 1 ]] && exitStatus=1
}

test_20_changed() {
  output=`./jperms.pl -f /tmp/patterns.txt -d /testdir | grep "changed=20 "`
  assertEquals "Summary: inspected=22 changed=20 failed=0 pending=0" "$output"
  [[ $? == 1 ]] && exitStatus=1
  #find /testdir -ls
}

test_0_pending_0_changed() {
  output=`./jperms.pl -f /tmp/patterns.txt -d /testdir | grep "pending=0$"`
  assertEquals "Summary: inspected=22 changed=0 failed=0 pending=0" "$output"
  [[ $? == 1 ]] && exitStatus=1
}

test_no_rules_file() {
  # expected message
  m="ERROR: unable to open rules file does_not_exist.txt"
  output=`./jperms.pl -f does_not_exist.txt -d /testdir 2>&1 | grep "$m"`
  assertEquals "$m" "$output"
  [[ $? == 1 ]] && exitStatus=1
}

test_5_fields_expected() {
  p=/tmp/patterns.txt
  echo hello > $p
  # expected mess
  m="PARSE_ERROR: $p, line 1: 5 fields expected, line ignored"
  output=`./jperms.pl -f $p -d /testdir 2>&1 | grep "$m"`
  assertEquals "$m" "$output"
  [[ $? == 1 ]] && exitStatus=1
}

test_bad_user_name() {
  p=/tmp/patterns.txt
  echo "/testdir baduser -  - -" > $p
  # expected mess
  m="PARSE_ERROR: $p, line 1: unable to find user baduser, field ignored"
  output=`./jperms.pl -f $p -d /testdir 2>&1 | grep "$m"`
  assertEquals "$m" "$output"
  [[ $? == 1 ]] && exitStatus=1
}

test_bad_group_name() {
  p=/tmp/patterns.txt
  echo "/testdir badgroup -  - -" > $p
  # expected mess
  m="PARSE_ERROR: $p, line 1: unable to find user badgroup, field ignored"
  output=`./jperms.pl -f $p -d /testdir 2>&1 | grep "$m"`
  assertEquals "$m" "$output"
  [[ $? == 1 ]] && exitStatus=1
}

test_file_required() {
  # expected mess
  m="ERROR: -file is required"
  output=`./jperms.pl 2>&1 | grep "$m"`
  assertEquals "$m" "$output"
  [[ $? == 1 ]] && exitStatus=1
}

test_h() {
  # expected mess
  m="Options:"
  output=`./jperms.pl -h 2>&1 | grep "^$m"`
  assertEquals "$m" "$output"
  [[ $? == 1 ]] && exitStatus=1
}

test_man() {
  # expected mess
  m="You need to install the perl-doc package to use this program."
  output=`./jperms.pl -man 2>&1 | grep "$m"`
  assertEquals "$m" "$output"
  [[ $? == 1 ]] && exitStatus=1
}

shunit=/tmp/shunit2-2.0.3/src/shell/shunit2
[[ -r $shunit ]] || exit 1

. $shunit

echo "exit $exitStatus"
exit $exitStatus
